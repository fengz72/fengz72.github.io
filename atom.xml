<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>网络随想录</title>
  
  
  <link href="https://he-jun.top/atom.xml" rel="self"/>
  
  <link href="https://he-jun.top/"/>
  <updated>2022-11-16T13:11:06.933Z</updated>
  <id>https://he-jun.top/</id>
  
  <author>
    <name>fengz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>控制器方法得到形参的session</title>
    <link href="https://he-jun.top/posts/4fd7801d.html"/>
    <id>https://he-jun.top/posts/4fd7801d.html</id>
    <published>2022-11-16T06:23:47.000Z</published>
    <updated>2022-11-16T13:11:06.933Z</updated>
    
    <content type="html"><![CDATA[<p>springBoot中如何得到形参?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(HttpSession session)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="doDispatch">doDispatch()</h2><p>在<code>DispatcherServlet</code>类里面</p><h3 id="复制request">复制request</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复制一份request</span></span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br></pre></td></tr></table></figure><h3 id="得到handler">得到handler</h3><p><code>mappedHandler = this.getHandler(processedRequest);</code>通过遍历<code>HandlerMappings</code>来获得<code>HandlerExecutionChain</code>(里面封装了handler, 类型为<code>HandlerMethod</code>. handler里面有parameters, 类型为<code>MethodParameter[]</code>, 里面是全部的参数)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span>  </span><br><span class="line"><span class="keyword">protected</span> HandlerExecutionChain <span class="title function_">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerMappings != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.handlerMappings.iterator();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">while</span>(var2.hasNext()) &#123;  </span><br><span class="line">            <span class="type">HandlerMapping</span> <span class="variable">mapping</span> <span class="operator">=</span> (HandlerMapping)var2.next();  </span><br><span class="line">            <span class="type">HandlerExecutionChain</span> <span class="variable">handler</span> <span class="operator">=</span> mapping.getHandler(request);  </span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> handler;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HandlerMappings</code>有5个, 这里匹配<code>RequestMappingHandlerMapping</code>.<br><img src="https://pan.he-jun.top/img/87793f202c9c7fbfe32bcd162624dc11.png" alt=""></p><h3 id="得到HandlerAdapter">得到HandlerAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> <span class="built_in">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><p>通过遍历<code>handlerAdapters</code>来得到合适的handlerAdapter. <code>HandlerAdapter</code>是一个接口, 里面<code>support()</code>来适配合适的handlerAdapter, <code>handler()</code>执行handler.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> HandlerAdapter <span class="title function_">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.handlerAdapters != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.handlerAdapters.iterator();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">while</span>(var2.hasNext()) &#123;  </span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> (HandlerAdapter)var2.next();  </span><br><span class="line">            <span class="keyword">if</span> (adapter.supports(handler)) &#123;  </span><br><span class="line">                <span class="keyword">return</span> adapter;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;No adapter for handler [&quot;</span> + handler + <span class="string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共有四种, 这里匹配<code>RequestMappingHandlerAdapter</code>.<br><img src="https://pan.he-jun.top/img/9e02d2e26deeea4e198e2c640ad9717f.png" alt=""></p><h3 id="执行方法">执行方法</h3><p>调用handlerAdapter得handler(), 返回modelAndView.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure><h2 id="handle">handle()</h2><p>在AbstractHandlerMethodAdapter.class里面<br>调用<code>handleInternal()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ModelAndView <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.handleInternal(request, response, (HandlerMethod)handler);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="handleInternal">handleInternal()</h2><p>在RequestMappingHandlerAdapter.class里面<br>调用<code>invokeHandlerMethod()</code>, 返回modelAndView</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">handleInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception &#123;   </span><br><span class="line">    ModelAndView mav;  </span><br><span class="line">mav = <span class="built_in">this</span>.invokeHandlerMethod(request, response, handlerMethod);    </span><br><span class="line">    <span class="keyword">return</span> mav;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="invokeHandlerMethod">invokeHandlerMethod()</h2><p>在RequestMappingHandlerAdapter.class里面<br>调用<code>invokeAndHandle()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span>  </span><br><span class="line"><span class="keyword">protected</span> ModelAndView <span class="title function_">invokeHandlerMethod</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception &#123;   </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.argumentResolvers != <span class="literal">null</span>) &#123;  </span><br><span class="line">            invocableMethod.setHandlerMethodArgumentResolvers(<span class="built_in">this</span>.argumentResolvers);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.returnValueHandlers != <span class="literal">null</span>) &#123;  </span><br><span class="line">            invocableMethod.setHandlerMethodReturnValueHandlers(<span class="built_in">this</span>.returnValueHandlers);  </span><br><span class="line">        &#125;   </span><br><span class="line">        invocableMethod.invokeAndHandle(webRequest, mavContainer, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数解析器">参数解析器</h3><p>这里的<code>argumentResolvers</code>为参数解析器</p><ul><li>里面封装一个名为<code>argumentResolvers</code>得ArrayList, 决定形参能填写的种类, 共有27种.</li><li>还有一个名为<code>argumentResolverCache</code>的ConcurrentHashMap, 存放匹配过的缓存.</li></ul><p><img src="https://pan.he-jun.top/img/cc8d2e7e233aec046c38be5c11d90e9a.png" alt=""></p><h3 id="返回值解析器">返回值解析器</h3><p><code>returnValueHandlers</code>为返回解析器, 共有15种.<br><img src="https://pan.he-jun.top/img/c769cc6d34e1b24d6e68b7a14741a9f6.png" alt=""></p><h2 id="invokeAndHandle">invokeAndHandle()</h2><p>在ServletInvocableHandlerMethod.class里面<br>调用<code>invokeForRequest()</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeAndHandle</span><span class="params">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> <span class="built_in">this</span>.invokeForRequest(webRequest, mavContainer, providedArgs);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="invokeForRequest">invokeForRequest()</h2><p>在InvocableHandlerMethod.class里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span>  </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invokeForRequest</span><span class="params">(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, Object... providedArgs)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    Object[] args = <span class="built_in">this</span>.getMethodArgumentValues(request, mavContainer, providedArgs);  </span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;  </span><br><span class="line">        logger.trace(<span class="string">&quot;Arguments: &quot;</span> + Arrays.toString(args));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.doInvoke(args);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>getMethodArgumentValues()</code>, 返回参数.<br><code>doInvoke()</code>激活方法.</p><h2 id="getMethodArgumentValues">getMethodArgumentValues()</h2><p>在InvocableHandlerMethod.class里面.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, Object... providedArgs) <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    MethodParameter[] parameters = <span class="built_in">this</span>.getMethodParameters();   </span><br><span class="line">    Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[parameters.length];  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; ++i) &#123;  </span><br><span class="line">        <span class="type">MethodParameter</span> <span class="variable">parameter</span> <span class="operator">=</span> parameters[i];     </span><br><span class="line">        args[i] = <span class="built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="built_in">this</span>.dataBinderFactory);   </span><br><span class="line">        <span class="keyword">return</span> args;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建一个数组, 长度为参数的个数.<br>这里的<code>resolvers</code>是[[C-Code/JAVA/框架/控制器方法得到形参的session#参数解析器]].<br>调用<code>resolveArgument()</code>方法.</p><h2 id="resolveArgument">resolveArgument()</h2><p>在HandlerMethodArgumentResolverComposite.class里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span>  </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    <span class="type">HandlerMethodArgumentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="built_in">this</span>.getArgumentResolver(parameter);  </span><br><span class="line">    <span class="keyword">if</span> (resolver == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unsupported parameter type [&quot;</span> + parameter.getParameterType().getName() + <span class="string">&quot;]. supportsParameter should be called first.&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getArgumentResolver">getArgumentResolver()</h3><p>如果缓存里面有匹配的, 就直接返回缓存里面的数据.<br>如果缓存里面没有, 在<code>argumentResolvers</code>里面匹配合适的参数解析器, 加入缓存, 再返回.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span>  </span><br><span class="line"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title function_">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> &#123;  </span><br><span class="line">    <span class="type">HandlerMethodArgumentResolver</span> <span class="variable">result</span> <span class="operator">=</span> (HandlerMethodArgumentResolver)<span class="built_in">this</span>.argumentResolverCache.get(parameter);  </span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="built_in">this</span>.argumentResolvers.iterator();  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">while</span>(var3.hasNext()) &#123;  </span><br><span class="line">            <span class="type">HandlerMethodArgumentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> (HandlerMethodArgumentResolver)var3.next();  </span><br><span class="line">            <span class="keyword">if</span> (resolver.supportsParameter(parameter)) &#123;  </span><br><span class="line">                result = resolver;  </span><br><span class="line">                <span class="built_in">this</span>.argumentResolverCache.put(parameter, resolver);  </span><br><span class="line">                <span class="keyword">break</span>;            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存中以方法的参数<code>HandlerMethodParameter</code>为key, 以匹配到的参数解析器为value.<br><img src="https://pan.he-jun.top/img/40f002b3a86ef3c622b978b1a9f75a90.png" alt=""></p><p>这里匹配到的参数解析器为<code>ServletRequestMethodArgumentResolver</code>, 说明<code>HttpSession</code>类型的形参由<code>ServletRequestMethodArgumentResolver</code>解析.</p><h3 id="resolveArgument-2">resolveArgument()</h3><p>调用参数解析器里面的<code>resolveArgument()</code>方法</p><h2 id="resolveArgument-3">resolveArgument()</h2><p>在ServletRequestMethodArgumentResolver.class里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer, NativeWebRequest webRequest, <span class="meta">@Nullable</span> WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">    Class&lt;?&gt; paramType = parameter.getParameterType();  </span><br><span class="line">    <span class="keyword">if</span> (WebRequest.class.isAssignableFrom(paramType)) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!paramType.isInstance(webRequest)) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Current request is not of type [&quot;</span> + paramType.getName() + <span class="string">&quot;]: &quot;</span> + webRequest);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> webRequest;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> !ServletRequest.class.isAssignableFrom(paramType) &amp;&amp; !MultipartRequest.class.isAssignableFrom(paramType) ? <span class="built_in">this</span>.resolveArgument(paramType, (HttpServletRequest)<span class="built_in">this</span>.resolveNativeRequest(webRequest, HttpServletRequest.class)) : <span class="built_in">this</span>.resolveNativeRequest(webRequest, paramType);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getParameterType()</code>得到参数的类型, 这里为<code>interface javax.servlet.http.HttpSession</code>.</p><p><code>WebRequest.class.isAssignableFrom(paramType)</code>判断HttpSession是否继承于WebRequest, 这里为否.</p><p><code>!ServletRequest.class.isAssignableFrom(paramType) &amp;&amp; !MultipartRequest.class.isAssignableFrom(paramType)</code>为true, 执行<code>this.resolveArgument(paramType, (HttpServletRequest)this.resolveNativeRequest(webRequest, HttpServletRequest.class))</code>方法.</p><h2 id="resolveArgument-4">resolveArgument()</h2><p>在ServletRequestMethodArgumentResolver.class里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">resolveArgument</span><span class="params">(Class&lt;?&gt; paramType, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">    <span class="keyword">if</span> (HttpSession.class.isAssignableFrom(paramType)) &#123;  </span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();  </span><br><span class="line">        <span class="keyword">if</span> (session != <span class="literal">null</span> &amp;&amp; !paramType.isInstance(session)) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Current session is not of type [&quot;</span> + paramType.getName() + <span class="string">&quot;]: &quot;</span> + session);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> session;  </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>HttpSession session = request.getSession();</code>调用原生的servlet API来获得session.</p><h2 id="getSession">getSession()</h2><p>在RequestFacade.class里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HttpSession <span class="title function_">getSession</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.request == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(sm.getString(<span class="string">&quot;requestFacade.nullRequest&quot;</span>));  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getSession(<span class="literal">true</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用重载的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HttpSession <span class="title function_">getSession</span><span class="params">(<span class="type">boolean</span> create)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.request == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(sm.getString(<span class="string">&quot;requestFacade.nullRequest&quot;</span>));  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> SecurityUtil.isPackageProtectionEnabled() ? (HttpSession)AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">GetSessionPrivilegedAction</span>(create)) : <span class="built_in">this</span>.request.getSession(create);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SecurityUtil.isPackageProtectionEnabled()</code>为false, 调用<code>this.request.getSession(create)</code>.</p><h3 id="getSession-2">getSession()</h3><p>在Request.class里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> HttpSession <span class="title function_">getSession</span><span class="params">(<span class="type">boolean</span> create)</span> &#123;  </span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="built_in">this</span>.doGetSession(create);  </span><br><span class="line">    <span class="type">return</span> <span class="variable">session</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : session.getSession();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="doGetSession">doGetSession()</h3><p>在Request.class里面<br>真正对session处理的方法, 其中最重要的是下面的两个方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.session = manager.findSession(<span class="built_in">this</span>.requestedSessionId);</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.session = manager.createSession(sessionId);</span><br></pre></td></tr></table></figure><h3 id="总结">总结</h3><p>以后再分析<code>getSession</code>是怎么实现的.<br><img src="https://pan.he-jun.top/img/eccca7ae571152d1d63d0d2de668142e.png" alt=""></p><h3 id="参考文献">参考文献</h3><p><a href="https://www.cnblogs.com/java-chen-hao/p/10774858.html">博客园-session的应用</a><br><a href="https://juejin.cn/post/7000570872490622990">掘金-Java Servlet中Session的原理以及使用方式</a><br><a href="https://blog.csdn.net/qiu7qiu7/article/details/81194874">csdn-session工作过程</a><br><a href="http://t.zoukankan.com/ZL0508-p-7309189.html">zoukankan-透过源码看session</a></p><h2 id="总结-2">总结</h2><ul><li><code>HttpSession</code>类型的形参由<code>ServletRequestMethodArgumentResolver</code>解析.</li><li>ServletRequestMethodArgumentResolver.class里面调用原生API<code>request.getSession()</code>来获得session</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;springBoot中如何得到形参?&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@GetMapping(&amp;quot;/test&amp;quot;)&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title function_&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HttpSession session)&lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="spring" scheme="https://he-jun.top/categories/spring/"/>
    
    
    <category term="session" scheme="https://he-jun.top/tags/session/"/>
    
    <category term="springBoot" scheme="https://he-jun.top/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://he-jun.top/posts/518e617c.html"/>
    <id>https://he-jun.top/posts/518e617c.html</id>
    <published>2022-05-24T09:22:09.000Z</published>
    <updated>2022-11-16T13:11:06.933Z</updated>
    
    <content type="html"><![CDATA[<p>git学习过程中一些常用的指令.</p><span id="more"></span><p><code>git add</code></p><p><code>git commit -m &quot;&quot;</code></p><p><code>git log --pretty=onelin</code>查看提交历史，一行</p><p><code>git reset --hard HEAD^</code>回退上一次提交</p><p><code>git reset --hard [版本号]</code>回退到指定的版本号</p><p><code>git reflog</code>查看历史指令</p><p><code>git status</code>查看当前状态</p><p><code>git diff HEAD -- [filename]</code>查看工作区与版本库里文件的区别</p><p>撤销工作区的内容（未提交到stage）</p><p><code>git restore [filename]</code></p><p>撤销暂存区的内容（已提交到stage，git add），此时修改会回到工作区，变为未modified</p><p><code>git restore --staged [filename]</code></p><p>从版本库删除一个文件</p><p><code>git rm [filename]</code></p><p><code>git commit -m &quot;rm [filename]&quot;</code></p><p>误删一个文件，从版本库里面恢复</p><p><code>git checkout [filename]</code></p><h2 id="远程仓库">远程仓库</h2><p><code> git remote add origin git@github.com:fengz72/git_test.git</code>将远程仓库和本地仓库关联</p><p><code>git push -u origin master</code>把master分支推到远程库，<code>-u</code>会将本地<code>master</code>分支和远程<code>master</code>分支关联起来</p><p><code>git push origin master</code></p><p>本地分支与远程仓库分支绑定</p><p><code>git switch -c dev origin/dev</code>在本地创建和远程分支对应的分支</p><p><code>git pull</code>提示no tracking information，需要绑定</p><p><code>git branch --set-upstream-to=origin/dev dev</code> 与远程仓库绑定 Branch ‘dev’ set up to track remote branch ‘dev’ from ‘origin’.</p><p>删除远程库</p><p><code>git remote -v</code>查看远程库信息</p><p><code>git remote rm origin</code>删除远程库</p><p><code>git clone</code></p><h2 id="分支">分支</h2><p><code>git checkout -b dev</code>创建并切换到dev分支上，相当于以下两条指令<code>git branch dev</code>，<code>git checkout dev</code></p><p><code>git branch</code>查看当前分支</p><p><code>git switch [分支名]</code>，<code>git checkout [分支名]</code>切换分支</p><p><code>git switch -c [分支名]</code>切换+创建分支</p><p><code>git merge dev</code>把指定分支合并到当前分支</p><p><code>git branch -d dev</code>删除分支</p><p><code>git branch -D feature-vulcan</code>强制删除未合并的分支</p><p>冲突（conflicts）</p><p>解决冲突，再提交，就会自动合并</p><p><code>git log --graph</code>可以看到分支合并图</p><p><code>git log --graph --pretty=oneline</code>一行</p><p><code>git log --graph --pretty=oneline --abbrev-commit</code>提交的地址缩短</p><p>merge是把目标分支的改动也加到当前分支，而当前分支自己的改动不一定在目标分支。</p><p>禁用<code>Fast forward</code></p><p><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></p><p>临时存储工作内容</p><p><code>git stash</code></p><p><code>git stash list</code>查看存储了哪一些</p><p><code>git stash pop</code>恢复并删除记录，等价于<code>git stash apply</code> + <code>git stash drop</code></p><p><code>git stash apply stash@&#123;0&#125;</code>恢复指定内容</p><p><code> git cherry-pick 7ca26e1</code>把bug提交的修改复制到当前分支</p><p><code>git rebase</code>合并分支，一条直线</p><h2 id="标签">标签</h2><p><code>git tag v1.0</code>打标签</p><p><code>git tag v0.9 053427</code>对commit打标签</p><p><code>git tag -a v0.1 -m &quot;version 0.1 released&quot; 92e2e3</code>带有说明的标签 <code>-a</code>指定标签名，<code>-m</code>指定说明文字</p><p><code>git tag</code>查看已有标签</p><p><code>git show v1.0</code>查看标签的详细信息</p><p><code>git tag -d v0.9</code>删除标签</p><p><code>git push origin :refs/tags/&lt;tagname&gt;</code>需要先删除本地标签，再删除远程标签</p><p><code>git push origin [tagname]</code>推送本地标签</p><p><code>git push origin --tags</code>推送全部未推送过的本地标签</p><h2 id="命令别名">命令别名</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732837407424">命令别名</a></p><p><code> git config --global alias.lg &quot;log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit&quot;</code></p><h2 id="问题">问题</h2><p>warning: LF will be replaced by CRLF in <a href="http://vulcan.py">vulcan.py</a>.<br>The file will have its original line endings in your working directory</p><p><a href="https://blog.csdn.net/wq6ylg08/article/details/88761581">https://blog.csdn.net/wq6ylg08/article/details/88761581</a></p><p>LF and CRLF</p><p><code>git config core.autocrlf</code>查询设置</p><p><code>git config --global core.autocrlf true</code>设置为true</p><ul><li><p>在**“把modified修改过的文件git add到暂存区stage”<strong>时，Git自动把</strong>LF转换成CRLF**，并给出那条警告”LF will be replaced by CRLF”</p></li><li><p>在**“把modified修改过的文件由暂存区(stage) 提交(commit)到版本库/仓库(repository)”<strong>时，Git自动把</strong>CRLF转换成LF**</p></li><li><p>在**“用 检出/git checkout切换到指定分支 或 git clone克隆远程版本库”<strong>来加载代码时，Git自动把</strong>LF转换成CRLF**</p></li></ul><h2 id="参考资料">参考资料</h2><ol><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰git教程</a></li><li><a href="https://git-scm.com/book/zh/v2">官方教程</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;git学习过程中一些常用的指令.&lt;/p&gt;</summary>
    
    
    
    <category term="tools" scheme="https://he-jun.top/categories/tools/"/>
    
    
    <category term="git" scheme="https://he-jun.top/tags/git/"/>
    
  </entry>
  
</feed>
